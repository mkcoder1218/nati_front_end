import jsPDF from 'jspdf';
import { ServiceGuide } from '@/services/serviceGuide.service';

export interface PDFGenerationOptions {
  includeSteps?: boolean;
  includeRequirements?: boolean;
  includeFees?: boolean;
  includeTime?: boolean;
  language?: 'english' | 'amharic';
}

export class ServiceGuidePDFGenerator {
  private doc: jsPDF;
  private currentY: number = 20;
  private pageHeight: number = 297; // A4 height in mm
  private margin: number = 20;
  private lineHeight: number = 7;

  constructor() {
    this.doc = new jsPDF();
  }

  private addText(text: string, fontSize: number = 12, isBold: boolean = false, color: string = '#000000') {
    this.doc.setFontSize(fontSize);
    this.doc.setFont('helvetica', isBold ? 'bold' : 'normal');
    this.doc.setTextColor(color);
    
    // Handle text wrapping
    const maxWidth = 170; // Page width minus margins
    const lines = this.doc.splitTextToSize(text, maxWidth);
    
    // Check if we need a new page
    if (this.currentY + (lines.length * this.lineHeight) > this.pageHeight - this.margin) {
      this.doc.addPage();
      this.currentY = this.margin;
    }
    
    this.doc.text(lines, this.margin, this.currentY);
    this.currentY += lines.length * this.lineHeight;
  }

  private addHeading(text: string, level: number = 1) {
    const fontSize = level === 1 ? 18 : level === 2 ? 16 : 14;
    const color = level === 1 ? '#2563eb' : '#374151';
    
    this.currentY += 5; // Add some space before heading
    this.addText(text, fontSize, true, color);
    this.currentY += 3; // Add some space after heading
  }

  private addSeparator() {
    this.currentY += 5;
    this.doc.setDrawColor(200, 200, 200);
    this.doc.line(this.margin, this.currentY, 190, this.currentY);
    this.currentY += 5;
  }

  private addStepsList(steps: { title: string; description: string }[]) {
    steps.forEach((step, index) => {
      this.addText(`${index + 1}. ${step.title}`, 12, true);
      if (step.description) {
        this.addText(`   ${step.description}`, 11);
      }
      this.currentY += 3;
    });
  }

  private addRequirementsList(requirements: string[]) {
    requirements.forEach((requirement, index) => {
      this.addText(`â€¢ ${requirement}`, 11);
    });
  }

  private addHeader(guide: ServiceGuide) {
    // Add logo/title area
    this.addHeading('Negari - Government Service Feedback System', 1);
    this.addSeparator();
    
    // Service title
    this.addHeading(guide.title, 1);
    
    // Description
    if (guide.description) {
      this.addText(guide.description, 12);
      this.currentY += 5;
    }
    
    // Basic info
    this.addText(`Category: ${guide.category}`, 11, false, '#6b7280');
    this.addText(`Office: ${guide.office_name || 'Not specified'}`, 11, false, '#6b7280');
    this.addText(`Generated on: ${new Date().toLocaleDateString()}`, 11, false, '#6b7280');
    
    this.addSeparator();
  }

  private addFooter() {
    const pageCount = this.doc.getNumberOfPages();
    for (let i = 1; i <= pageCount; i++) {
      this.doc.setPage(i);
      this.doc.setFontSize(10);
      this.doc.setTextColor('#6b7280');
      this.doc.text(
        `Page ${i} of ${pageCount} - Generated by Negari System`,
        this.margin,
        this.pageHeight - 10
      );
    }
  }

  public generateServiceGuidePDF(
    guide: ServiceGuide,
    options: PDFGenerationOptions = {}
  ): void {
    const {
      includeSteps = true,
      includeRequirements = true,
      includeFees = true,
      includeTime = true,
    } = options;

    // Reset position
    this.currentY = 20;

    // Add header
    this.addHeader(guide);

    // Add estimated time and fees
    if (includeTime || includeFees) {
      this.addHeading('Service Information', 2);
      
      if (includeTime && guide.estimated_time) {
        this.addText(`Estimated Time: ${guide.estimated_time}`, 12, true);
      }
      
      if (includeFees && guide.fees) {
        this.addText(`Fees: ${guide.fees}`, 12, true);
      }
      
      this.addSeparator();
    }

    // Add requirements
    if (includeRequirements && guide.requirements && guide.requirements.length > 0) {
      this.addHeading('Requirements', 2);
      this.addRequirementsList(guide.requirements);
      this.addSeparator();
    }

    // Add step-by-step guide
    if (includeSteps && guide.steps && guide.steps.length > 0) {
      this.addHeading('Step-by-Step Guide', 2);
      this.addStepsList(guide.steps);
      this.addSeparator();
    }

    // Add contact information
    this.addHeading('Contact Information', 2);
    this.addText('For more information or assistance, please visit the respective government office or contact them directly.', 11);
    this.addText('You can also use the Negari system to provide feedback about your experience.', 11);

    // Add footer
    this.addFooter();
  }

  public downloadPDF(filename: string): void {
    this.doc.save(filename);
  }

  public getPDFBlob(): Blob {
    return this.doc.output('blob');
  }

  public getPDFDataURL(): string {
    return this.doc.output('dataurlstring');
  }
}

// Utility function to generate and download service guide PDF
export const downloadServiceGuidePDF = (
  guide: ServiceGuide,
  options?: PDFGenerationOptions
): void => {
  const generator = new ServiceGuidePDFGenerator();
  generator.generateServiceGuidePDF(guide, options);
  
  const filename = `${guide.title.replace(/[^a-zA-Z0-9]/g, '_')}_guide.pdf`;
  generator.downloadPDF(filename);
};

// Utility function to generate PDF blob for preview
export const generateServiceGuidePDFBlob = (
  guide: ServiceGuide,
  options?: PDFGenerationOptions
): Blob => {
  const generator = new ServiceGuidePDFGenerator();
  generator.generateServiceGuidePDF(guide, options);
  return generator.getPDFBlob();
};
